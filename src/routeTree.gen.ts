/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ApiAuthSplatRouteImport } from './routes/api/auth/$'
import { Route as AuthPasskeySetupRouteImport } from './routes/auth/passkey-setup'
import { Route as AuthRouteRouteImport } from './routes/auth/route'
import { Route as AuthSignInRouteImport } from './routes/auth/sign-in'
import { Route as AuthSignOutRouteImport } from './routes/auth/sign-out'
import { Route as AuthSignUpRouteImport } from './routes/auth/sign-up'
import { Route as CheckoutIndexRouteImport } from './routes/checkout/index'
import { Route as CheckoutSuccessRouteImport } from './routes/checkout/success'
import { Route as CustomerPortalRouteImport } from './routes/customer/portal'
import { Route as FocusIndexRouteImport } from './routes/focus/index'
import { Route as HabitsHabitIdRouteImport } from './routes/habits/$habitId'
import { Route as HabitsIndexRouteImport } from './routes/habits/index'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SettingsAccountRouteImport } from './routes/settings/account'
import { Route as SettingsNotificationsRouteImport } from './routes/settings/notifications'
import { Route as SettingsProfileRouteImport } from './routes/settings/profile'
import { Route as SettingsThemeRouteImport } from './routes/settings/theme'

const AuthRouteRoute = AuthRouteRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const HabitsIndexRoute = HabitsIndexRouteImport.update({
  id: '/habits/',
  path: '/habits/',
  getParentRoute: () => rootRouteImport,
} as any)
const FocusIndexRoute = FocusIndexRouteImport.update({
  id: '/focus/',
  path: '/focus/',
  getParentRoute: () => rootRouteImport,
} as any)
const CheckoutIndexRoute = CheckoutIndexRouteImport.update({
  id: '/checkout/',
  path: '/checkout/',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsThemeRoute = SettingsThemeRouteImport.update({
  id: '/settings/theme',
  path: '/settings/theme',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsProfileRoute = SettingsProfileRouteImport.update({
  id: '/settings/profile',
  path: '/settings/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsNotificationsRoute = SettingsNotificationsRouteImport.update({
  id: '/settings/notifications',
  path: '/settings/notifications',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsAccountRoute = SettingsAccountRouteImport.update({
  id: '/settings/account',
  path: '/settings/account',
  getParentRoute: () => rootRouteImport,
} as any)
const HabitsHabitIdRoute = HabitsHabitIdRouteImport.update({
  id: '/habits/$habitId',
  path: '/habits/$habitId',
  getParentRoute: () => rootRouteImport,
} as any)
const CustomerPortalRoute = CustomerPortalRouteImport.update({
  id: '/customer/portal',
  path: '/customer/portal',
  getParentRoute: () => rootRouteImport,
} as any)
const CheckoutSuccessRoute = CheckoutSuccessRouteImport.update({
  id: '/checkout/success',
  path: '/checkout/success',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthSignUpRoute = AuthSignUpRouteImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthSignOutRoute = AuthSignOutRouteImport.update({
  id: '/sign-out',
  path: '/sign-out',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthSignInRoute = AuthSignInRouteImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthPasskeySetupRoute = AuthPasskeySetupRouteImport.update({
  id: '/passkey-setup',
  path: '/passkey-setup',
  getParentRoute: () => AuthRouteRoute,
} as any)
const ApiAuthSplatRoute = ApiAuthSplatRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteRouteWithChildren
  '/auth/passkey-setup': typeof AuthPasskeySetupRoute
  '/auth/sign-in': typeof AuthSignInRoute
  '/auth/sign-out': typeof AuthSignOutRoute
  '/auth/sign-up': typeof AuthSignUpRoute
  '/checkout/success': typeof CheckoutSuccessRoute
  '/customer/portal': typeof CustomerPortalRoute
  '/habits/$habitId': typeof HabitsHabitIdRoute
  '/settings/account': typeof SettingsAccountRoute
  '/settings/notifications': typeof SettingsNotificationsRoute
  '/settings/profile': typeof SettingsProfileRoute
  '/settings/theme': typeof SettingsThemeRoute
  '/checkout': typeof CheckoutIndexRoute
  '/focus': typeof FocusIndexRoute
  '/habits': typeof HabitsIndexRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteRouteWithChildren
  '/auth/passkey-setup': typeof AuthPasskeySetupRoute
  '/auth/sign-in': typeof AuthSignInRoute
  '/auth/sign-out': typeof AuthSignOutRoute
  '/auth/sign-up': typeof AuthSignUpRoute
  '/checkout/success': typeof CheckoutSuccessRoute
  '/customer/portal': typeof CustomerPortalRoute
  '/habits/$habitId': typeof HabitsHabitIdRoute
  '/settings/account': typeof SettingsAccountRoute
  '/settings/notifications': typeof SettingsNotificationsRoute
  '/settings/profile': typeof SettingsProfileRoute
  '/settings/theme': typeof SettingsThemeRoute
  '/checkout': typeof CheckoutIndexRoute
  '/focus': typeof FocusIndexRoute
  '/habits': typeof HabitsIndexRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteRouteWithChildren
  '/auth/passkey-setup': typeof AuthPasskeySetupRoute
  '/auth/sign-in': typeof AuthSignInRoute
  '/auth/sign-out': typeof AuthSignOutRoute
  '/auth/sign-up': typeof AuthSignUpRoute
  '/checkout/success': typeof CheckoutSuccessRoute
  '/customer/portal': typeof CustomerPortalRoute
  '/habits/$habitId': typeof HabitsHabitIdRoute
  '/settings/account': typeof SettingsAccountRoute
  '/settings/notifications': typeof SettingsNotificationsRoute
  '/settings/profile': typeof SettingsProfileRoute
  '/settings/theme': typeof SettingsThemeRoute
  '/checkout/': typeof CheckoutIndexRoute
  '/focus/': typeof FocusIndexRoute
  '/habits/': typeof HabitsIndexRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth'
    | '/auth/passkey-setup'
    | '/auth/sign-in'
    | '/auth/sign-out'
    | '/auth/sign-up'
    | '/checkout/success'
    | '/customer/portal'
    | '/habits/$habitId'
    | '/settings/account'
    | '/settings/notifications'
    | '/settings/profile'
    | '/settings/theme'
    | '/checkout'
    | '/focus'
    | '/habits'
    | '/api/auth/$'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth'
    | '/auth/passkey-setup'
    | '/auth/sign-in'
    | '/auth/sign-out'
    | '/auth/sign-up'
    | '/checkout/success'
    | '/customer/portal'
    | '/habits/$habitId'
    | '/settings/account'
    | '/settings/notifications'
    | '/settings/profile'
    | '/settings/theme'
    | '/checkout'
    | '/focus'
    | '/habits'
    | '/api/auth/$'
  id:
    | '__root__'
    | '/'
    | '/auth'
    | '/auth/passkey-setup'
    | '/auth/sign-in'
    | '/auth/sign-out'
    | '/auth/sign-up'
    | '/checkout/success'
    | '/customer/portal'
    | '/habits/$habitId'
    | '/settings/account'
    | '/settings/notifications'
    | '/settings/profile'
    | '/settings/theme'
    | '/checkout/'
    | '/focus/'
    | '/habits/'
    | '/api/auth/$'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  CheckoutSuccessRoute: typeof CheckoutSuccessRoute
  CustomerPortalRoute: typeof CustomerPortalRoute
  HabitsHabitIdRoute: typeof HabitsHabitIdRoute
  SettingsAccountRoute: typeof SettingsAccountRoute
  SettingsNotificationsRoute: typeof SettingsNotificationsRoute
  SettingsProfileRoute: typeof SettingsProfileRoute
  SettingsThemeRoute: typeof SettingsThemeRoute
  CheckoutIndexRoute: typeof CheckoutIndexRoute
  FocusIndexRoute: typeof FocusIndexRoute
  HabitsIndexRoute: typeof HabitsIndexRoute
  ApiAuthSplatRoute: typeof ApiAuthSplatRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/habits/': {
      id: '/habits/'
      path: '/habits'
      fullPath: '/habits'
      preLoaderRoute: typeof HabitsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/focus/': {
      id: '/focus/'
      path: '/focus'
      fullPath: '/focus'
      preLoaderRoute: typeof FocusIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/checkout/': {
      id: '/checkout/'
      path: '/checkout'
      fullPath: '/checkout'
      preLoaderRoute: typeof CheckoutIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/theme': {
      id: '/settings/theme'
      path: '/settings/theme'
      fullPath: '/settings/theme'
      preLoaderRoute: typeof SettingsThemeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/profile': {
      id: '/settings/profile'
      path: '/settings/profile'
      fullPath: '/settings/profile'
      preLoaderRoute: typeof SettingsProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/notifications': {
      id: '/settings/notifications'
      path: '/settings/notifications'
      fullPath: '/settings/notifications'
      preLoaderRoute: typeof SettingsNotificationsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/account': {
      id: '/settings/account'
      path: '/settings/account'
      fullPath: '/settings/account'
      preLoaderRoute: typeof SettingsAccountRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/habits/$habitId': {
      id: '/habits/$habitId'
      path: '/habits/$habitId'
      fullPath: '/habits/$habitId'
      preLoaderRoute: typeof HabitsHabitIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/customer/portal': {
      id: '/customer/portal'
      path: '/customer/portal'
      fullPath: '/customer/portal'
      preLoaderRoute: typeof CustomerPortalRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/checkout/success': {
      id: '/checkout/success'
      path: '/checkout/success'
      fullPath: '/checkout/success'
      preLoaderRoute: typeof CheckoutSuccessRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/sign-up': {
      id: '/auth/sign-up'
      path: '/sign-up'
      fullPath: '/auth/sign-up'
      preLoaderRoute: typeof AuthSignUpRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/auth/sign-out': {
      id: '/auth/sign-out'
      path: '/sign-out'
      fullPath: '/auth/sign-out'
      preLoaderRoute: typeof AuthSignOutRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/auth/sign-in': {
      id: '/auth/sign-in'
      path: '/sign-in'
      fullPath: '/auth/sign-in'
      preLoaderRoute: typeof AuthSignInRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/auth/passkey-setup': {
      id: '/auth/passkey-setup'
      path: '/passkey-setup'
      fullPath: '/auth/passkey-setup'
      preLoaderRoute: typeof AuthPasskeySetupRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface AuthRouteRouteChildren {
  AuthPasskeySetupRoute: typeof AuthPasskeySetupRoute
  AuthSignInRoute: typeof AuthSignInRoute
  AuthSignOutRoute: typeof AuthSignOutRoute
  AuthSignUpRoute: typeof AuthSignUpRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthPasskeySetupRoute: AuthPasskeySetupRoute,
  AuthSignInRoute: AuthSignInRoute,
  AuthSignOutRoute: AuthSignOutRoute,
  AuthSignUpRoute: AuthSignUpRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(AuthRouteRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRouteRoute: AuthRouteRouteWithChildren,
  CheckoutSuccessRoute: CheckoutSuccessRoute,
  CustomerPortalRoute: CustomerPortalRoute,
  HabitsHabitIdRoute: HabitsHabitIdRoute,
  SettingsAccountRoute: SettingsAccountRoute,
  SettingsNotificationsRoute: SettingsNotificationsRoute,
  SettingsProfileRoute: SettingsProfileRoute,
  SettingsThemeRoute: SettingsThemeRoute,
  CheckoutIndexRoute: CheckoutIndexRoute,
  FocusIndexRoute: FocusIndexRoute,
  HabitsIndexRoute: HabitsIndexRoute,
  ApiAuthSplatRoute: ApiAuthSplatRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'

declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
